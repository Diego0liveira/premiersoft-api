version: '3.3'

networks:
  app_network:
    driver: bridge

services:
  nestjs:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nestjs
    working_dir: /usr/src/app
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '3000:3000'
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - ELASTICSEARCH_NODE=${ELASTICSEARCH_NODE}
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
    depends_on:
      - microservice
      - postgres
      - elasticsearch
      - redis
    networks:
      - app_network

  microservice:
    build:
      context: .
    container_name: nest_microservice
    ports:
      - '3001:3001'
    environment:
      NODE_ENV: ${NODE_ENV}
      DATABASE_URL: ${DATABASE_URL}
      ELASTICSEARCH_NODE: ${ELASTICSEARCH_NODE}
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
    depends_on:
      - postgres
      - elasticsearch
      - redis
    networks:
      - app_network
    restart: unless-stopped
    command: ['node', 'dist/microservice.js']

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'

  kafka:
    image: confluentinc/cp-kafka:7.4.1
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
    ports:
      - '9092:9092'

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app_network

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /data/postgres
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/data/postgres
    networks:
      - app_network
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - '8081:80'
    depends_on:
      - postgres
    networks:
      - app_network

  elasticsearch:
    image: elasticsearch:8.10.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - 'ES_JAVA_OPTS=-Xms1g -Xmx1g'
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - '9200:9200'
      - '9300:9300'
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    entrypoint: >
      /bin/bash -c "
      echo 'Iniciando Elasticsearch...';
      /usr/local/bin/docker-entrypoint.sh;
      sleep 10;
      echo 'Redefinindo senha do usuário kibana_system...';
      bin/elasticsearch-reset-password -u kibana_system --batch --silent > /usr/share/elasticsearch/reset-password.log;
      cat /usr/share/elasticsearch/reset-password.log;
      exec /usr/local/bin/docker-entrypoint.sh
      "
    networks:
      - app_network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "curl --fail -u 'elastic:elastic_password_123' http://localhost:9200 || exit 1",
        ]
      interval: 10s
      retries: 5

  kibana:
    image: kibana:8.10.2
    container_name: kibana
    ports:
      - '5601:5601'
    environment:
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_NODE}
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=0C1WD8SAdPKlNF1jmd*m
    entrypoint: >
      /bin/bash -c "
      echo 'Aguardando Elasticsearch...';
      until curl -s -u elastic:elastic_password_123 http://elasticsearch:9200 -o /dev/null; do sleep 3; done;
      echo 'Elasticsearch está pronto!';
      exec kibana
      "
    depends_on:
      - elasticsearch
    networks:
      - app_network

volumes:
  postgres_data:
    driver: local
  elasticsearch_data:
    driver: local
