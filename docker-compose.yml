version: '3.3'


networks:
  app_network:
    driver: bridge

services:
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /data/postgres
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/data/postgres
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USERNAME} -d ${DB_NAME}']
      interval: 10s
      timeout: 5s
      retries: 5

     
  elasticsearch:
    image: elasticsearch:8.10.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - 'ES_JAVA_OPTS=-Xms1g -Xmx1g'
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - '9200:9200'
      - '9300:9300'
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - app_network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'curl -s http://localhost:9200/_cluster/health | grep -vq ''"status":"red"''',
        ]
      interval: 10s
      timeout: 5s
      retries: 5


  kibana:
    image: kibana:8.10.2
    container_name: kibana
    ports:
      - '5601:5601'
    environment:
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_NODE}
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=u8gE3E0fpK99pZVv55Ue
    depends_on:
      - elasticsearch
    networks:
      - app_network


  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - '6379:6379'
    networks:
      - app_network
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5


  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'
    volumes:
      - ./zookeeper-data:/data
    networks:
      - app_network
    healthcheck:
      test: ['CMD-SHELL', 'echo srvr | nc localhost 2181 || exit 1']
      interval: 10s
      timeout: 5s
      retries: 5


  kafka:
    image: confluentinc/cp-kafka:7.4.1
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - '9092:9092'
    volumes:
      - kafka-logs:/var/lib/kafka/data
    networks:
      - app_network
    healthcheck:
      test:
        ['CMD-SHELL', 'kafka-topics --bootstrap-server localhost:9092 --list']
      interval: 10s
      timeout: 5s
      retries: 5
    
  nestjs:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nestjs
    working_dir: /usr/src/app
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '3001:3001'
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - ELASTICSEARCH_NODE=${ELASTICSEARCH_NODE}
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
    depends_on:
      - postgres
      - elasticsearch
      - redis
      - kafka
    networks:
      - app_network


  microservice:
    build:
      context: .
    container_name: nest_microservice
    ports:
      - '3002:3002'
    environment:
      NODE_ENV: ${NODE_ENV}
      DATABASE_URL: ${DATABASE_URL}
      ELASTICSEARCH_NODE: ${ELASTICSEARCH_NODE}
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      KAFKA_BROKERS: ${KAFKA_BROKER}
    depends_on:
      - kafka
      - zookeeper
      - postgres
      - elasticsearch
      - redis
    networks:
      - app_network
    restart: unless-stopped
    command: ['node', 'dist/microservice.js']


volumes:
  postgres_data:
    driver: local
  elasticsearch_data:
    driver: local
  kafka-logs:
    driver: local
